library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(shinydashboard)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
source("bloomfilter.R")
library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(shinydashboard)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
source("bloomfilter.R")
conn <-
dbConnect(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306)
raw <- dbGetQuery(conn, 'select * from sampledata')
raw
library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(shinydashboard)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
source("bloomfilter.R")
?Reduce
add <- function(x) Reduce("+", x)
add(list(1, 2, 3))
?bitwShiftL
rawToInt <- function(bytes) {
Reduce(function(left, right) {
bitwShiftL(left, 8) + right
}, as.integer(bytes), 0L)
}
?reactive()
# An empty prototype of the data frame we want to create
prototype <- data.frame(date = character(), time = character(),
size = numeric(), r_version = character(), r_arch = character(),
r_os = character(), package = character(), version = character(),
country = character(), ip_id = character(), received = numeric())
# Connects to streaming log data for cran.rstudio.com and
# returns a reactive expression that serves up the cumulative
# results as a data frame
packageStream <- function(session) {
# Connect to data source
conn <-
dbConnect(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306)
raw <- dbGetQuery(conn, 'select * from sampledata')
# sock <- socketConnection("cransim.rstudio.com", 6789, blocking = FALSE, open = "r")
# Clean up when session is over
# session$onSessionEnded(function() {
#   close(sock)
# })
# Returns new lines
# newLines <- reactive({
# invalidateLater(1000, session)
# readLines(sock)
# })
# Parses newLines() into data frame
# reactive({
# if (length(newLines()) == 0)
# return()
# read.csv(textConnection(newLines()), header=FALSE, stringsAsFactors=FALSE,
# col.names = names(prototype)
# ) %>% mutate(received = as.numeric(Sys.time()))
# })
}
raw
library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(shinydashboard)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
source("bloomfilter.R")
View(raw)
?invalidateLater()
readLines(raw)
readLines(conn)
raw
library(data.table)
prototype <- dbGetQuery(conn, 'select * from sampledata') %>% setDT
prototype
library(ggplot2)
shinytest::recordTest("~/git-local/git.Brewing/Shiny/wj")
library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(data.table)
library(shinydashboard)
library(ggplot2)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
# source("bloomfilter.R")
# An empty prototype of the data frame we want to create
# prototype <- data.frame(date = character(), time = character(),
#   size = numeric(), r_version = character(), r_arch = character(),
#   r_os = character(), package = character(), version = character(),
#   country = character(), ip_id = character(), received = numeric())
# Connects to streaming log data for cran.rstudio.com and
# returns a reactive expression that serves up the cumulative
# results as a data frame
packageStream <- function(session) {
# Connect to data source
conn <-
dbConnect(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306)
prototype <- dbGetQuery(conn, 'select * from sampledata') %>% setDT
# sock <- socketConnection("cransim.rstudio.com", 6789, blocking = FALSE, open = "r")
# Clean up when session is over
# session$onSessionEnded(function() {
#   close(sock)
# })
# Returns new lines
# newLines <- reactive({
# invalidateLater(1000, session)
# readLines(sock)
# })
# Parses newLines() into data frame
# reactive({
# if (length(newLines()) == 0)
# return()
# read.csv(textConnection(newLines()), header=FALSE, stringsAsFactors=FALSE,
# col.names = names(prototype)
# ) %>% mutate(received = as.numeric(Sys.time()))
# })
}
# Accumulates pkgStream rows over time; throws out any older than timeWindow
# (assuming the presence of a "received" field)
packageData <- function(pkgStream, timeWindow) {
shinySignals::reducePast(pkgStream, function(memo, value) {
rbind(memo, value) %>%
filter(received > as.numeric(Sys.time()) - timeWindow)
}, prototype)
}
# Count the total nrows of pkgStream
downloadCount <- function(pkgStream) {
shinySignals::reducePast(pkgStream, function(memo, df) {
if (is.null(df))
return(memo)
memo + nrow(df)
}, 0)
}
?reducePast()
walk <- reactive({fps(30); sample(c(-1, 0, 1), 1)})
location <- walk %>% reducePast(`+`, 0)
location()
location
?socketConnection
raw
?readLines()
prototype <- dbGetQuery(conn, 'select * from sampledata') %>% setDT
sock <- socketConnection("webdev.iptime.org", 3306, blocking = FALSE, open = "r")
library(RMySQL)
library(shiny)
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
library(dplyr)
library(data.table)
library(shinydashboard)
library(ggplot2)
library(bubbles)        # devtools::install_github("jcheng5/bubbles")
# An empty prototype of the data frame we want to create
prototype <-
data.frame(
idx = numeric(),
step = numeric(),
sleeptime = numeric(),
distance = numeric(),
calorie = numeric(),
bpm = numeric(),
realtime_bpm = numeric()
)
# Connect to data source
conn <-
dbConnect(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306
)
prototype <- dbGetQuery(conn, 'select * from sampledata') %>% setDT
prototype
sock <- socketConnection("webdev.iptime.org", 3306, blocking = FALSE, open = "r")
sock
readLines(sock)
?socketConnection
install.packages('pool')
# An empty prototype of the data frame we want to create
my_db <- dbPool(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306
)
library(RMySQL)
library(pool)
# An empty prototype of the data frame we want to create
my_db <- dbPool(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306
)
my_db
my_db %>% tbl("test") %>% head(5)
my_db %>% tbl() %>% head(5)
my_db %>% tbl(.) %>% head(5)
my_db %>% tbl('sampledata') %>% head(5)
readLines(my_db)
my_db %>% tbl("sampledata") %>% head(5)
# An empty prototype of the data frame we want to create
my_db <- dbPool(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306
)
my_db %>% tbl("sampledata") %>% head(5)
sock <-
socketConnection("webdev.iptime.org",
3306,
blocking = FALSE,
open = "r")
readLines(sock)
readLines(sock,n = 10)
sock
?socketConnection
getOption("encoding")
getOption("timeout"))
getOption("timeout")
readLines(sock,n = 1)
readLines(sock,n = 2)
readLines(sock,n = 3)
?stdin()
stdin()
# Connect to data source
conn <-
dbConnect(
MySQL(),
dbname = 'data_sample',
username = 'data_sample',
password = 'sample1234',
host = 'webdev.iptime.org',
port = 3306
)
readLines(conn)
class(conn)
prototype <- my_db %>% tbl("sampledata") %>% head(5)
prototype
prototype <- my_db %>% tbl("sampledata")
prototype
?textConnection()
?getQueryString()
class(my_db)
x <- runif(3e1,-3,3)
x <- runif(3e1,-3,3)
y <- x*.32 + rnorm(3e1)
plot(x, y)
x <- runif(3e1,-3,3)
y <- x*1.32 + rnorm(3e1)
plot(x, y)
x <- runif(3e1,-3,3)
y <- x*2.32 + rnorm(3e1)
plot(x, y)
x <- runif(3e1,160, 180)
y <- x*2.32 + rnorm(3e1)
plot(x, y, xlab = '')
x <- runif(3e1,160, 180)
y <- x*.99 + rnorm(3e1)
x <- runif(3e1,160, 180)
y <- x*.99 + rnorm(3e1)
plot(x, y, xlab = '')
x <- runif(3e1,160, 180)
y <- x^2*.99 + rnorm(3e1)
plot(x, y, xlab = '')
x <- runif(3e1,160, 180)
y <- x*.99 + rnorm(3e1)
plot(x, y, xlab = '')
x <- runif(3e1,160, 180)
y <- x*.85 + rnorm(3e1)
plot(x, y, xlab = '')
x <- runif(3e1,160, 180)
y <- x*.91 + rnorm(3e1)
plot(x, y, xlab = '')
plot(x, y, xlab = '자녀의 키')
plot(x, y, xlab = '자녀의 키', ylab = '부모의 평균키')
plot(x, y, xlab = '자녀의 키', ylab = '부모의 평균키', family = 'Iropke')
plot(x, y, xlab = '자녀의 키', ylab = '부모의 평균키', family = 'IropkeBatang')
plot(x, y, xlab = '자녀의 키', ylab = '부모의 평균키', family = 'Iropke Batang')
plot(x, y, xlab = '자녀의 키', ylab = '부모의 평균키', family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- x * .91 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- x * .8 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- x * .32 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 100 + x * .32 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .32 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .31 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .31 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .31 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .31 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
w <- 1e3
h <- .9e3
w <- 1e3
h <- .9e3
png('Google Drive/Research/StatConsult/Soomgo/2009/GS건설/0909/fig.png',
w,
h,
res = 2e2)
par(mfrow = c(1, 1), mar = c(4, 4, 1, 1))
x <- runif(3e1, 160, 180)
y <- 120 + x * .21 + rnorm(3e1)
plot(x,
y,
xlab = '자녀의 키',
ylab = '부모의 평균키',
family = 'Iropke Batang Medium')
dev.off()
