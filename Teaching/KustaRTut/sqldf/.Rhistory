'./'
crashes <- read.csv("crashes.csv")
roads <- read.csv("roads.csv")
head(crashes)
View(crashes)
View(roads)
crashes <- read.csv("crashes.csv")
roads <- read.csv("roads.csv")
join_string <- "select
crashes.*
, roads.District
, roads.Length
from crashes
left join roads
on crashes.Road = roads.Road"
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE)
require(sqldf)
crashes <- read.csv("crashes.csv")
roads <- read.csv("roads.csv")
join_string <- "select
crashes.*
, roads.District
, roads.Length
from crashes
left join roads
on crashes.Road = roads.Road"
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE)
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE) %>% View
require(sqldf)
require(dplyr)
require(sqldf)
require(dplyr)
crashes <- read.csv("crashes.csv")
roads <- read.csv("roads.csv")
join_string <- "select
crashes.*
, roads.District
, roads.Length
from crashes
left join roads
on crashes.Road = roads.Road"
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE) %>% View
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE) %>% View
View(roads)
crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE) %>% View
View(roads)
crashes_join_roads2 <- sqldf(join_string2, stringsAsFactors = FALSE) %>% View
join_string2 <- "select
crashes.*
, roads.District
, roads.Length
from crashes
inner join roads
on crashes.Road = roads.Road"
crashes_join_roads2 <- sqldf(join_string2, stringsAsFactors = FALSE) %>% View
crashes_merge_roads <- merge(crashes, roads, by = c("Road"))
crashes_merge_roads <- merge(crashes, roads, by = c("Road")) %>% View
?merge
crashes_merge_roads <- merge(crashes, roads, by = c("Road")) %>% View
crashes_join_roads2 <- sqldf(join_string2, stringsAsFactors = FALSE) %>% View
crashes_merge_roads <- merge(crashes, roads, by = c("Road")) %>% View # Inner join
crashes_merge_roads <- merge(crashes, roads, by = c("Road")) # Inner join
crashes_merge_roads2 <- merge(crashes, roads, by = c("Road"), all.x = TRUE) # Left join
crashes_merge_roads3 <- merge(crashes, roads, by = c("Road"), all.y = TRUE) # Right join
crashes_merge_roads4 <- merge(crashes, roads, by = c("Road"), all.x = TRUE, # Inner join
all.y = TRUE)
View(crashes_merge_roads4)
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authors
authorN <- within(authors, { name <- surname; rm(surname) })
authorN
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
books
(m0 <- merge(authorN, books))
m0
m0 <- merge(authorN, books)
(
(m0 <- merge(authorN, books))
(m0 <- merge(authorN, books))
(m0 <- merge(authorN, books))
(a <- 1-3)
(m0 <- merge(authorN, books))
(crashes_join_roads2 <- sqldf(join_string2, stringsAsFactors = FALSE))
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authorN <- within(authors, { name <- surname; rm(surname) })
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m0 <- merge(authorN, books))
authorN
books
(m0 <- merge(authorN, books, by = intersect(names(x), names(y)))) #
(m0 <- merge(authorN, books, by = intersect(names(x), names(y))) #
(m0 <- merge(authorN, books, by = intersect(names(x), names(y)))) #
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m0 <- merge(authorN, books, by = intersect(names(authorN), names(books)))) #
View(authorN)
View(books)
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
View(authors)
?intersect
stopifnot(exprs = {
identical(m0, m2[, names(m0)])
as.character(m1[, 1]) == as.character(m2[, 1])
all.equal(m1[, -1], m2[, -1][ names(m1)[-1] ])
identical(dim(merge(m1, m2, by = NULL)),
c(nrow(m1)*nrow(m2), ncol(m1)+ncol(m2)))
})
(m0 <- merge(authorN, books, by = intersect(names(authorN), names(books))))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
m2 <- merge(books, authors, by.x = "name", by.y = "surname")
stopifnot(exprs = {
identical(m0, m2[, names(m0)])
as.character(m1[, 1]) == as.character(m2[, 1])
all.equal(m1[, -1], m2[, -1][ names(m1)[-1] ])
identical(dim(merge(m1, m2, by = NULL)),
c(nrow(m1)*nrow(m2), ncol(m1)+ncol(m2)))
})
stopifnot({1 == 2})
stopifnot({1 == 2 ; 1+3})
stopifnot({(1 == 2 ; 1+3)})
stopifnot({1 == 2
1+3})
stopifnot({
3-2
1 == 2
1+3})
stopifnot({
3-2
1 == 1
1+3})
stopifnot({
3-2 > 0
1 == 1
1+3 < 0})
stopifnot({
3-2 > 0
1 == 1
1+3 > 0})
stopifnot({
3-2 > 0
1 == 1
1+3 < 0})
identical(1:9, 9:1)
join_string <- "select  crashes.*,
roads.District,
roads.Length
from    crashes
left join roads
on      crashes.Road = roads.Road"
(crashes_join_roads <- sqldf(join_string,stringsAsFactors = FALSE))
join_string2 <- "select crashes.*,
roads.District,
roads.Length
from    crashes
inner join roads
on      crashes.Road = roads.Road"
(crashes_join_roads2 <- sqldf(join_string2, stringsAsFactors = FALSE))
join_string2 <- "select crashes.*,
roads.District
roads.Length
from    crashes
inner join roads
on crashes.Road = roads.Road
where   crashes.Road = 'US-40'"
crashes_join_roads4 <- sqldf(join_string2,stringsAsFactors = FALSE)
join_string2 <- "select crashes.*,
roads.District,
roads.Length
from    crashes
inner join roads
on crashes.Road = roads.Road
where   crashes.Road = 'US-40'"
crashes_join_roads4 <- sqldf(join_string2,stringsAsFactors = FALSE)
(m0 <- merge(authorN, books, by = intersect(names(authorN), names(books))))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
m2 <- merge(books, authors, by.x = "name", by.y = "surname")
m2
View(books)
View(authors)
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
